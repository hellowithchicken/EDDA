install.packages("tidyverse")
library(tidyverse)
data <- datasets::airmiles
data <- datasets::cars
View(data)
View(data)
data %>%
filter(speed > 10,
dist < 4)
data %>%
filter(speed > 10)
data %>%
filter(speed > 10) %>%
group_by(speed) %>%
summarie(n = n())
data %>%
filter(speed > 10) %>%
group_by(speed) %>%
summarise(n = n())
final_data <- data %>%
filter(speed > 10) %>%
group_by(speed) %>%
summarise(n = n())
install.packages("igraph")
g = sample_pa(1400, m = 5)
library(igraph)
g = sample_pa(1400, m = 5)
library(igraph)
g = sample_pa(1400, m = 5)
for_drawing =layout_with_lgl(g)
library(igraph)
g = sample_pa(1400, m = 5)
for_drawing =layout_with_lgl(g)
plot(g, layout=for_drawing)
library(igraph)
g = sample_pa(1400, m = 5)
for_drawing =layout_with_lgl(g)
plot(g,vertex.size=6, vertex.label=NA, layout=for_drawing)
library(igraph)
g = sample_pa(1400, m = 5)
for_drawing =layout_with_lgl(g)
plot(g,vertex.size=6, vertex.label=NA, layout=for_drawing)
library(igraph)
g = sample_pa(1400, m = 5)
for_drawing =layout_with_lgl(g)
plot(g,vertex.size=6, vertex.label=NA, layout=layout_with_lgl)
library(igraph)
g = sample_pa(100, m = 5)
for_drawing =layout_with_lgl(g)
plot(g,vertex.size=6, vertex.label=NA, layout=layout_with_lgl)
load("~/OneDrive - UvA/2020-2021/Parameter estimation/PEMBS/parameter_estimation/PSM.RData")
View(lmdemo)
lmdemorange(xmax = 15)
View(lmdemorange)
View(lmdemo)
lmdemorange()
lmdemoiseed()
View(lmdemoiseed)
View(lmdemorange)
View(lmdemo)
lmdemo()
lmdemoiseed(iseed=789)
lmdemoiseed()
lmdemorange(range=2,step=0.1)
View(lmdemo)
lmdemorange(range=2,step=0.1,sigma=1)
View(lmdemo)
lmdemosigma()
View(lmdemosigma)
load("~/OneDrive - UvA/2020-2021/Parameter estimation/PEMBS/parameter_estimation/PSM.RData")
lmdemo()
lmdemo(sigma = 5)
lmdemorange(sigma = 4)
lmrangedemo(sigma = 4, range = 2, step = 0.1)
lmdemorange(sigma = 4, range = 2, step = 0.1)
lmdemorange(sigma = 4, range = 2, step = 0.1)
install.packages("ellipse")
library(ellipse)
parcorrtdemo(lellipse = T)
powerfitplotomit(imax=1)
powerfitplotomit(imax=1, select = c(1:4))
library(tidyverse)
norm_100 <- rnorm(100)
norm_10k <- rnorm(10000)
## create qq plots
qqnorm(norm_100)
qqnorm(norm_100)
par(mar=c(1,1,1,1))
qqnorm(norm_100)
qqnorm(norm_10k)
ggplot(norm_100) + geom_bar()
hist(norm_100)
hist(norm_10k)
sd_100 <- sd(norm_100)
sd_10k <- sd(norm_10k)
mean_100 <- mean(norm_100)
mean_10k <- mean(norm_10k)
less_2 <- pnorm(2)
bigger_0.5 <- 1 - pnorm(-0.5)
between__1_2 <- pnorm(2) - pnorm(-1)
verify_less_2 <- (norm_10k < 2)
verify_less_2 <- sum(norm_10k < 2)
verify_less_2 <- sum(norm_10k < 2)/length(norm_10k)
# d
new_10k <- rnorm(10000, 3, 2)
## find value such that 95% are smaller than it
dnorm(0.95, 3, 2)
## find value such that 95% are smaller than it
pnorm(0.95, 3, 2)
## find value such that 95% are smaller than it
qnorm(0.95, 3, 2)
## find value such that 95% are smaller than it
smaller_95 <- qnorm(0.95, 3, 2)
## transform standard distribution
normal <- rnorm(1000)
transformed <- -10 + 5*normal
## confirm it works
mean(transformed)
sd(transformed)
par(mfrow=c(1,3))
log_normal <- rlnorm(10000, meanlog = 2, sdlog = 2)
log_normal <- rlnorm(10000, meanlog = 2, sdlog = 2)
binomial_data <- rbinom(50, prob = 0.25)
uniform <- runif(60, -2, 3)
poisson_data <- rpois(200, 9)
par(mfrow=c(1,3))
## generate data
log_normal <- rlnorm(10000, meanlog = 2, sdlog = 2)
binomial_data <- rbinom(50, prob = 0.25)
uniform <- runif(60, -2, 3)
poisson_data <- rpois(200, 9)
hist(log_normal)
boxplot(log_normal)
qqnorm(log_normal)
getwd
getwd()
getSrcDirectory()[1]
setwd(getSrcDirectory()[1])
library(rstudioapi)
## set working directory to source file location
setwd(dirname(getActiveDocumentContext()$path))
getwd()
## set working directory to where data is
setwd("/Users/IggyMac/OneDrive - UvA/2020-2021/EDDA/GitHub/EDDA/Assignment 0/data")
data <- read_delim("mortality.txt", delim = "\t")
View(data)
data <- read_delim("mortality.txt", delim = ",")
View(data)
data <- read_delim("mortality.txt")
data <- read_csv2("mortality.txt")
View(data)
data <- read.table("mortality.txt",header=TRUE)
View(data)
data <- read_csv2("mortality.txt")
View(data)
data <- read_csv("mortality.txt")
data <- read_tsv("mortality.txt")
data <- read_table("mortality.txt")
View(data)
View(data)
data <- data %>%
gather(key = "type", value = "rate", 2:4)
View(data)
data <- read_table("mortality.txt")
View(data)
data <- data %>%
gather(key = "type", value = "rate", 3:4)
View(data)
ggplot(data, aes(rate)) + geom_bar()
ggplot(data, aes(rate)) +
geom_bar() +
facet_grid(~type)
ggplot(data, aes(x = rate, color = type)) +
geom_histogram()
ggplot(data, aes(x = rate, fill = type)) +
geom_histogram()
data <- read_table("mortality.txt")
ggplot(data, aes(x = rate, fill = teen) +
geom_histogram()
ggplot(data, aes(x = rate, fill = teen)) +
geom_histogram()
ggplot(data, aes(x = rate, fill = teen)) +
geom_histogram()
ggplot(data, aes(x = "rate", fill = "teen")) +
geom_histogram()
ggplot(data, aes(x = "rate", fill = "teen")) +
geom_histogram()
data <- read.table("mortality.txt", header = TRUE)
ggplot(data, aes(x = rate, fill = teen)) +
geom_histogram()
data <- read.table("mortality.txt", header = TRUE)
ggplot(data, aes(x = teen)) +
geom_histogram()
hist(data$teen)
boxplot(data$teen)
qqplot(data$teen)
qqplot(data$teen)
qqnorm(data$teen)
hist(data$mort)
boxplot(data$mort)
qqnorm(data$mort)
cor(data$teen, data$teen)
cor(data$teen, data$mort)
ggplot(data, aes(x = teen, y = mort)) +
geom_dotplot() +
geom_line()
ggplot(data, aes(x = teen, y = mort)) +
geom_dotplot() +
geom_line()
ggplot(data, aes(x = teen, y = mort)) +
geom_point() +
geom_line()
ggplot(data, aes(x = teen, y = mort)) +
geom_point() +
geom_smooth(method = lm)
m <- 30
n <- 30
m <- 30
n <- 30
mu <- nu <- 180
m <- n <- 30
range(5)
range(56)
seq(1, 5)
get_pvalues <- function (n, mu, sd, m, nu, sd, rep = 1000){
p_values <- c()
for (i in seq(1, rep) {
x <- rnorm(n, mu, sd)
y <- rnorm(m, nu, sd)
p_values <- c(p_values, t.test(x, y, var.equal = TRUE))
}
return(p_values)
}
get_pvalues <- function(n, mu, sd, m, nu, rep = 1000){
p_values <- c()
for (i in seq(1, rep)){
x <- rnorm(n, mu, sd)
y <- rnorm(m, nu, sd)
p_values <- c(p_values, t.test(x, y, var.equal = TRUE))
}
return(p_values)
}
p_values <- get_pvalues(n, mu, sd, m, nu)
rnorm(n, mu, sd)
n
m
sd
m <- n <- 30
## a
mu <- nu <- 180
sd <- 20
x <- rnorm(n, mu, sd)
y <- rnorm(m, nu, sd)
get_pvalues <- function(n, mu, sd, m, nu, rep = 1000){
p_values <- c()
for (i in seq(1, rep)){
x <- rnorm(n, mu, sd)
y <- rnorm(m, nu, sd)
p_values <- c(p_values, t.test(x, y, var.equal = TRUE))
}
return(p_values)
}
p_values <- get_pvalues(n, mu, sd, m, nu)
m <- n <- 30
## a
mu <- nu <- 180
sd <- 20
x <- rnorm(n, mu, sd)
y <- rnorm(m, nu, sd)
get_pvalues <- function(n, mu, sd, m, nu, rep = 1000){
p_values <- c()
for (i in seq(1, rep)){
x <- rnorm(n, mu, sd)
y <- rnorm(m, nu, sd)
p_values <- c(p_values, t.test(x, y, var.equal = TRUE)[[3]])
}
return(p_values)
}
p_values <- get_pvalues(n, mu, sd, m, nu)
hist(p_values)
## find values lower than 0.05
sum(p_values)
## find values lower than 0.05
sum(p_values<0.05)
## find values lower than 0.05
mean(p_values < 0.05)
p_values <- get_pvalues(n, mu, sd, m, nu)
hist(p_values)
## find values lower than 0.05
mean(p_values < 0.05)
p_values <- get_pvalues(n, mu, sd, m, nu)
## find values lower than 0.05 and 0.1
mean(p_values < 0.05)
m <- n <- 30
## a
mu <- nu <- 180
sd <- 20
get_pvalues <- function(n, mu, sd, m, nu, rep = 1000){
p_values <- c()
for (i in seq(1, rep)){
x <- rnorm(n, mu, sd)
y <- rnorm(m, nu, sd)
p_values <- c(p_values, t.test(x, y, var.equal = TRUE)[[3]])
}
hist(p_values)
return(p_values)
}
p_values <- get_pvalues(n, mu, sd, m, nu)
## find values lower than 0.05 and 0.1
mean(p_values < 0.05)
m <- n <- 30
## a
mu <- nu <- 180
sd <- 20
get_pvalues <- function(n, mu, sd, m, nu, rep = 1000){
p_values <- c()
for (i in seq(1, rep)){
x <- rnorm(n, mu, sd)
y <- rnorm(m, nu, sd)
p_values <- c(p_values, t.test(x, y, var.equal = TRUE)[[3]])
}
hist(p_values)
return(p_values)
}
p_values <- get_pvalues(n, mu, sd, m, nu)
## find values lower than 0.05 and 0.1
mean(p_values < 0.05)
m <- n <- 30
## a
mu <- nu <- 180
sd <- 20
get_pvalues <- function(n, mu, sd, m, nu, rep = 1000){
p_values <- c()
for (i in seq(1, rep)){
x <- rnorm(n, mu, sd)
y <- rnorm(m, nu, sd)
p_values <- c(p_values, t.test(x, y, var.equal = TRUE)[[3]])
}
hist(p_values)
return(p_values)
}
p_values <- get_pvalues(n, mu, sd, m, nu)
## find values lower than 0.05 and 0.1
mean(p_values < 0.05)
mean(p_values < 0.1)
